include "binarySearchTree"

#define BTNodePosi(T) BTNode<T> *

template<typename T> struct BTNode{
    BTNodePosi(T) parent;
    Vector<T> data;
    Vector<BTNodePosi(T)> child;
    BTNode(){
        parent = NULL;
        child.insert(0, NULL);
    }
    BTNode( T e, BTNodePosi(T) lc = NULL, BTNodePosi(T) rc = NULL ){
        parent = NULL;
        data.insert(0, e);
        child.insert(0, lc);
        child.insert(1, rc);
        if(lc){
            lc->parent = this;
        }
        
        if(rc){
            rc->parent = this;
        }
    }
}

template<typename T> class BTree{
    protected:
        int _size;
        int _order;
        BTNodePosi(T) _root;
        BTNodePosi(T) _hot;
        void solveOverflow( BTNodePosi(T) );
        void solveUnderflow( BTNodePosi(T) );
    public:
        BTree( int order = 3 ) : _order(order), _size(0)
        {
            _root = new BTNode<T>
        }
}