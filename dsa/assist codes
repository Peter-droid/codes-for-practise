/*
 * @Author: your name
 * @Date: 2020-09-27 16:21:47
 * @LastEditTime: 2020-09-29 23:31:18
 * @LastEditors: your name
 * @Description: In User Settings Edit
 * @FilePath: \dsa\assist codes
 */
/*
*    vector 
*/

class Fib{
    protected:
        int * array;
        int i;

    public:
        Fib( int length );
        ~Fib();
        int get();
        int prev();


        Fib( int length ){
    
            array = new int[length];
            array[0] = 1;
            array[1] = 1;

            for(i = 2; i < length; i++){
                array[i] = array[i - 1] + array[i - 2];
            }

        }

        ~Fib(){
            delete [] array;
        }



    }

template<typename T> 
void swap( T & a, T & b ){
    T tem = a;
    a = b;
    b = tem;
}

/*
*    list
*/

/*
*  stack
*/

sturct Queen{
    int x, y;
    Queen( int xx = 0. int yy = 0 ) : x (xx) , y ( yy ) {};
    bool operator== ( Queen const & q ) const{
        return( x == q.x )
                || ( y == q.y )
                || ( x + y == q.x + q.y )
                || ( x - y == q.x - q.y );

    }
    bool operator!= ( Queen const & q ) const {
        return !( *this == q );
    }
};

void place Queens( int N ){
    Stack<Queen> solu;
    Queen q(0, 0);
    do
    {
        if ( N <= solu.size() || N <= q.y )
        {
            q = solu.pop();
            y++;
        }
        
    } while ( ( 0 < q.x ) || ( q.y < N ) );
    
}
